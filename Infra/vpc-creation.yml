AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Version:
    Type: String
    Default: "v1"
  ServiceName:
    Type: String
    Default: devs-withmission
  AppName:
    Type: String
    Description: Name of app requiring ELB exposure
    Default: devs-with-mission-web
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - prd 
      - dev
    Description: Environment definition

Mappings:
  ImageMap:
    us-east-1:
      "dev": "024177866594.dkr.ecr.us-east-1.amazonaws.com/devs-with-mission:latest"
  AvailabilityZone1:
    us-east-1: 
      "dev": "us-east-1a"
  AvailabilityZone2:
    us-east-1: 
      "dev": "us-east-1b"    
  ApplicationEnvironmentMap:
    us-east-1: 
      "dev": "dev"
  FargateNodes:    
    us-east-1: 
      "dev": "2" #2
  ListenerPortMap:
    us-east-1: 
      "dev": "8080"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: devs-with-mission-vpc
          PropagateAtLaunch: true

  MySubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: devs-with-mission-subnet-1a
          PropagateAtLaunch: true

  MySubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: devs-with-mission-subnet-1b
          PropagateAtLaunch: true

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: devs-with-mission-igw

  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: devs-with-mission-public-rt

  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: devs-with-mission-private-rt

  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MyPublicSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1A
      RouteTableId: !Ref MyPublicRouteTable

  MyPublicSubnet1BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1B
      RouteTableId: !Ref MyPublicRouteTable
  
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Service
      VpcId: !Ref MyVPC

  # TargetGroup  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ServiceName}-tg-${Stage}"
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC

  # LoadBalancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub "${ServiceName}-alb-${Stage}"
      Scheme: internal
      Type: application
      SecurityGroups: 
        - !FindInMap [FargateHtppSecurityGroupMap, !Ref "AWS::Region", !Ref Stage]
      Subnets:
        - !Ref MySubnet1A
        - !Ref MySubnet1B
      Tags:
        - Key: "Ambiente"
          Value: !Ref Stage 
        - Key: "Name"
          Value: !Ref AppName 

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !FindInMap [ListenerPortMap, !Ref "AWS::Region", !Ref Stage]
      Protocol: HTTP
  
  # Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AppName}-${Stage}"
      ClusterSettings:
        - Name: containerInsights
          Value: enabled 
      Tags:
        - Key: "Ambiente"
          Value: !Ref Stage 
        - Key: "Name"
          Value: !Ref AppName 

  # Policy
  Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 's3:*'
              - 'ecs:*'
              - 'ecr:*'
              - 'logs:*'
            Resource: '*'
    
  # Role
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref Policy

  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/ecs/${ServiceName}-${Stage}"  
      RetentionInDays: 30 

  # EcsTask
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !FindInMap [ImageMap, !Ref "AWS::Region", !Ref Stage]
          Cpu: 512
          Memory: 1024
          MemoryReservation: 512
          Name: !Sub "${ServiceName}_container"
          PortMappings:
            - HostPort: 3000
              Protocol: tcp
              ContainerPort: 3000
          Essential: true 
          Environment: #variaveis de ambiente
            - Name: ENV 
              Value: dev  
            - Name: PORT 
              Value: 3000
          LogConfiguration:
            LogDriver: awslogs 
            Options:
              awslogs-group: !Ref EcsLogGroup 
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs 
      Cpu: "512"
      Memory: "1024"      
      Family: !Ref AppName 
      NetworkMode: awsvpc 
      RequiresCompatibilities:
        - FARGATE 
      ExecutionRoleArn: !Ref Role
      TaskRoleArn: !Ref Role   

  # EcsService
  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !FindInMap [FargateNodes, !Ref "AWS::Region", !Ref Stage]
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub "${ServiceName}_container"
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !FindInMap [FargateHtppSecurityGroupMap, !Ref "AWS::Region", !Ref Stage]
          Subnets:
            - !Ref MySubnet1A
            - !Ref MySubnet1B
      PlatformVersion: LATEST
      ServiceName: !Sub "${ServiceName}_${Stage}"
      TaskDefinition: !Ref TaskDefinition

Outputs:
  VpcId:
    Value: !Ref MyVPC
  Subnet1A:
    Value: !Ref MySubnet1A
  Subnet1B:
    Value: !Ref MySubnet1B
